#!/usr/bin/env elixir
Mix.install([
  {:httpoison, "~> 1.8"},
  {:jason, "~> 1.3"}
])

defmodule Shortcut do
  @allegro_id "4"
  @api_version "v3"
  @api_url "https://api.app.shortcut.com/api/#{@api_version}"
  @shortcut_token System.fetch_env!("SHORTCUT_TOKEN")
  @project_id to_string(System.get_env("SHORTCUT_PROJECT", @allegro_id))
  @headers %{"content-type" => "application/json", "shortcut-token" => @shortcut_token}

  def new do
    IO.puts("new requires at least a name argument. Usage: shortcut new title [description]")
  end

  def new(name) do
    new(name, "")
  end

  def new(name, description) do
    body = %{
      "name" => name,
      "description" => description,
      "project_id" => @project_id
    }

    post("stories", body)
  end

  def label(story_id, name) do
    # Search all labels for name (downcase compare) & then apply that label
    label =
      labels()
      |> Jason.decode!()
      |> Enum.find(&String.downcase(&1["name"]) == name)
      |> create_label_params()

    body = %{
      "labels" => [label],
      "project_id" => @project_id,
      "story-public-id" => story_id
    }

    put("stories/#{story_id}", body)
  end

  def label(name) do
    # Search all labels for name (downcase compare) & then apply that label
    label =
      labels()
      |> Jason.decode!()
      |> Enum.find(&String.downcase(&1["name"]) == name)
      |> create_label_params()

    story_id = storyid()

    body = %{
      "labels" => [label],
      "project_id" => @project_id,
      "story-public-id" => story_id
    }

    put("stories/#{story_id}", body)
  end

  def projects do
    get("projects")
  end

  def whoami do
    get("member")
  end

  def labels do
    get("labels")
  end

  def storyid do
    [_owner, "sc-" <> story_id | _rest] = String.split(Git.current_branch, "/")
    story_id
  end

  defp create_label_params(label) do
    Map.take(label, ["color", "description", "name"])
  end

  defp post(endpoint, body) do
    HTTPoison.post("#{@api_url}/#{endpoint}", Jason.encode!(body), @headers)
    |> normalize_response()
  end

  defp get(endpoint) do
    HTTPoison.get("#{@api_url}/#{endpoint}", @headers)
    |> normalize_response()
  end

  defp put(endpoint, body) do
    HTTPoison.put("#{@api_url}/#{endpoint}", Jason.encode!(body), @headers)
    |> normalize_response()
  end

  defp normalize_response({:ok, %{body: body}}), do: body
  defp normalize_response({:error, error}), do: error
end

defmodule Git do
  def current_branch do
    {branch, 0} = System.cmd("git", ["branch", "--show-current"])
    branch
  end

end

if match?([], System.argv()) do
  IO.puts("""
  shortcut  - commandline Shortcut API Integration
            - Operates on current story by default
            - Uses git to obtain story id from current branch name
  Usage:
  new title [description]         Create new story with title and optional description
  projects                        List all projects. Use with jq for pretty output, i.e. shorcut projects | jq '.[] | {name: .name, id: .id}'
  whoami                          List info of the authenticated shortcut member from SHORTCUT_TOKEN
  labels                          List labels and their attributes
  label labelName                 Applies label 'labelName' to story from current branch
  label storyId labelName         Applies label 'labelName' to story with id 'storyId'
  """)

  Process.exit(self(), 1)
end

[action | args] = System.argv()
apply(Shortcut, String.to_atom(action), args)
|> IO.puts()
